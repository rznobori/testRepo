function fileCommit() {

	var element_file = document.getElementById("input_02_file");
	var element_msg = document.getElementById("commit_msg").value || "No input commit message.";
	var element_author = document.getElementById("commit_author").value || "tester";
	var element_email = document.getElementById("commit_email").value || "temp@xxx.com";

	// ------------------------------------------------------------
	// サポート状況
	// ------------------------------------------------------------
	if(!window.File){
		alert("File クラスに対応していません。");
		return;
	}
	if(!window.FileReader){
		alert("FileReader クラスに対応していません。");
		return;
	}

	// ファイルが選択されたか
	if(!(element_file.value)) return;

	// ファイルリストを取得
	var file_list = element_file.files;
	//console.dir(file_list);
	if(!file_list) return;


	// 複数ファイルが有る場合繰り返し処理する
	var len = file_list.length;
	for(var i = 0; i < len; i++){

		// i番目の File オブジェクトを取得
		var file = file_list[i];
		if(!file) return;

		// FileReader オブジェクトを生成
		var file_reader = new FileReader();

		// 画像ファイルのコミット
		if(file.type.indexOf("image") == 0) {

			imageFileInput(file_reader, file);

		} else {
			
			textFileInput(file_reader, file);
			
		} //END: if

	} //END: for
	

	// hashのキーに変数を指定する関数
	function hash(key, value) {
	  var h = {};
	  h[key] = value;
	  return h;
	}
	
	function imageFileInput(file_reader, file) {
		// 読み込み成功時に実行されるイベント
		file_reader.onload = function(e){
			var fileResult = file_reader.result;	// ファイルコンテンツ
			var fileName = file.name;				// ファイル名

			var result = "";
			var ary_u8 = new Uint8Array(file_reader.result);
			var i;
			var str;
			var num = ary_u8.length;
			for(i=0;i<num;i++){
				if(ary_u8[i] < 0x10){
					str = "0" + ary_u8[i].toString(16);
				}else{
					str = ary_u8[i].toString(16);
				}

				if((i % 16) == 0){
					result += str;
				}else if((i % 16) == 15){
					result += " " + str + "\n";
				}else{
					result += " " + str;
				}
			}
			store.set(fileName, result);
		};
		// 読み込みを開始する（ArrayBuffer オブジェクトを得る）
		file_reader.readAsArrayBuffer(file);
		
		// ** file_reader.readAsDataURLを使ってみる
	}


	function textFileInput(file_reader, file) {
		// 読み込み成功時に実行されるイベント
		file_reader.onload = function (e){
			var fileResult = file_reader.result;	// ファイルコンテンツ
			var fileName = file.name;				// ファイル名

			// treeオブジェクトとblobHashの発行
			repo.saveAs("blob", fileResult, function(err, blobHash){
				localStorage.setItem(blobHash, fileResult);

				//TODO modeは自動で判別させる
				repo.saveAs("tree",
				hash(fileName, { mode: modes.file, hash: blobHash }),
				function(err, treeHash){
					// treeHashを保存
					repo.loadAs("tree", treeHash, function(err, treeObject){
						store.set(treeHash, treeObject);
						store.set("treeHash", store.get(treeHash));
					});
				});
			});

			// コミット情報の作成
		    repo.saveAs("commit", {
				author: {
					name: element_author,
					email: element_email
				},
				tree: localStorage.getItem("treeHash"),
				message: element_msg
			}, function(err, commitHash){
				// commitHashを保存
				repo.loadAs("commit", commitHash, function(err, commitObject){
					// コミット情報をJSON形式でストレージへ保存
					store.set(commitHash, commitObject);
					
					store.set("refs/heads/master", commitHash);

				}); //END: repo.loadAs("commit")
			});

		}; //END: file_reader.onload
		// ファイルの読込を開始する
		file_reader.readAsText(file);
		
	}

}